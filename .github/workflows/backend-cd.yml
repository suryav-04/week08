name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'aks-week08'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'rg-week08'
      image_tag:
        description: 'Optional: CI image tag to deploy (else manifests tag, e.g. :latest)'
        required: false
        default: ''

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    env:
      NAMESPACE: "shop"   # change if your YAML uses a different namespace
      ACR: ${{ secrets.ACR_LOGIN_SERVER }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # âœ… No Service Principal â€” use kubeconfig secret instead
      - name: Write kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > $HOME/.kube/config
      - name: kubectl version
        run: kubectl version --client

      # (Optional) print inputs just for traceability
      - name: Show inputs
        run: |
          echo "AKS RG: ${{ github.event.inputs.aks_resource_group }}"
          echo "AKS Name: ${{ github.event.inputs.aks_cluster_name }}"
          echo "Image tag: ${{ github.event.inputs.image_tag }}"

      # Apply manifests (adjust paths if needed)
      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      # (Optional) pin images to your CI tag if provided (otherwise your YAML tag is used)
      - name: Pin images to CI tag (optional)
        if: ${{ github.event.inputs.image_tag != '' }}
        env:
          TAG: ${{ github.event.inputs.image_tag }}
        run: |
          kubectl set image deploy/product-service product-service=$ACR/product_service:$TAG -n ${{ env.NAMESPACE }}
          kubectl set image deploy/order-service   order-service=$ACR/order_service:$TAG   -n ${{ env.NAMESPACE }}

      - name: Show resources
        run: kubectl get deploy,svc,pods -n ${{ env.NAMESPACE }}

      # Robust wait: handle IP or hostname
      - name: Wait for Backend LoadBalancer IPs
        shell: bash
        run: |
          svc_prod="product-service-w08e1"  # ðŸ‘ˆ ensure these match your service names in YAML
          svc_order="order-service-w08e1"
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get svc $svc_prod -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc $svc_order -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            # fallback to hostname if IP is empty
            if [ -z "$PRODUCT_IP" ]; then PRODUCT_IP=$(kubectl get svc $svc_prod -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'); fi
            if [ -z "$ORDER_IP" ]; then ORDER_IP=$(kubectl get svc $svc_order -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'); fi
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then break; fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer addresses not assigned after timeout."
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
          echo "Product Service address: $PRODUCT_IP"
          echo "Order Service address:   $ORDER_IP"

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT
