# .github/workflows/backend_cd.yml
name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Optional: CI image tag to deploy (else manifests tag, e.g. :latest)'
        required: false
        default: ''

env:
  NS: shop
  ACR: ${{ secrets.ACR_LOGIN_SERVER }}
  SVC_PROD: product-service-w08e1   # ← change to your actual Service name if different
  SVC_ORDER: order-service-w08e1    # ← change to your actual Service name if different

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    # remove or keep environment if you have approvals configured
    # environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.32.0

      # ✅ Write kubeconfig from one of two secrets (no "if:" with secrets)
      - name: Write kubeconfig and set KUBECONFIG
        env:
          KCFG_GZ: ${{ secrets.KUBE_CONFIG_GZ_B64 }}
          KCFG:    ${{ secrets.KUBE_CONFIG_B64 }}
        shell: bash
        run: |
          mkdir -p "$HOME/.kube"
          if [ -n "$KCFG_GZ" ]; then
            echo "$KCFG_GZ" | base64 -d | gunzip > "$HOME/.kube/config"
          elif [ -n "$KCFG" ]; then
            echo "$KCFG" | base64 -d > "$HOME/.kube/config"
          else
            echo "ERROR: Add KUBE_CONFIG_GZ_B64 or KUBE_CONFIG_B64 secret." >&2
            exit 1
          fi
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> "$GITHUB_ENV"

      - name: Sanity check cluster access
        run: |
          kubectl config current-context
          kubectl get nodes

      - name: Ensure namespace exists
        run: |
          kubectl get ns "$NS" || kubectl create ns "$NS"
          kubectl get ns

      - name: Deploy Backend Infrastructure (ConfigMaps, Secrets, DBs)
        run: |
          kubectl apply -f k8s/configmaps.yaml   -n "$NS"
          kubectl apply -f k8s/secrets.yaml      -n "$NS"
          kubectl apply -f k8s/product-db.yaml   -n "$NS"
          kubectl apply -f k8s/order-db.yaml     -n "$NS"

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          kubectl apply -f k8s/product-service.yaml -n "$NS"
          kubectl apply -f k8s/order-service.yaml   -n "$NS"

      # Optional: pin to a specific CI image tag
      - name: Pin images to CI tag (optional)
        if: ${{ github.event.inputs.image_tag != '' }}
        env:
          TAG: ${{ github.event.inputs.image_tag }}
        run: |
          kubectl set image deploy/product-service product-service=$ACR/product_service:$TAG -n "$NS"
          kubectl set image deploy/order-service   order-service=$ACR/order_service:$TAG   -n "$NS"

      - name: Wait for deployments to be ready
        run: |
          kubectl rollout status deploy/product-service -n "$NS" --timeout=180s || true
          kubectl rollout status deploy/order-service   -n "$NS" --timeout=180s || true
          kubectl get deploy,svc,pods -n "$NS"

      - name: Wait for Backend LoadBalancer addresses
        shell: bash
        run: |
          for i in $(seq 1 60); do
            echo "Attempt $i/60..."
            PROD=$(kubectl get svc "$SVC_PROD" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORD=$(kubectl get svc "$SVC_ORDER" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            [[ -z "$PROD" ]] && PROD=$(kubectl get svc "$SVC_PROD" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            [[ -z "$ORD"  ]] && ORD=$(kubectl get svc "$SVC_ORDER" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [[ -n "$PROD" && -n "$ORD" ]]; then break; fi
            sleep 5
          done
          if [[ -z "$PROD" || -z "$ORD" ]]; then
            echo "Services in $NS:"; kubectl get svc -n "$NS"
            echo "Error: LoadBalancer addresses not assigned in time."
            exit 1
          fi
          echo "PRODUCT_IP=$PROD" >> $GITHUB_ENV
          echo "ORDER_IP=$ORD"   >> $GITHUB_ENV
          echo "Product: $PROD"
          echo "Order:   $ORD"

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT
